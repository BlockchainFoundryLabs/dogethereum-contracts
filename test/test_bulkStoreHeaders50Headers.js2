// Test renamed to "js2" because it takes a long time to run and we don't want to run it everytime we run tests
// The idea of this test is undertstand how DogeRelay.m_saveAncestors() works when there are many blocks.
var fs = require('fs');
var readline = require('readline');
var DogeRelay = artifacts.require("./DogeRelayForTests.sol");
var utils = require('./utils');


contract('DogeRelay', function(accounts) {
 it("testDifficulty", function() {
    var dr;    
    var headers = "0x";
    var hashes = "0x";
    return DogeRelay.deployed().then(function(instance) {      
      dr = instance;
      // Doge testnet 739200
      var block978000Hash = "0x7641d4485fe79e8b9c22d4c013c916c52262b47fde97c1f50f64694b277517ed";
      return dr.setInitialParent(block978000Hash, 978000, 1, {from: accounts[0]}); 
    }).then(
      function(result) {
        return new Promise((resolve, reject) => {
          var lineReader = readline.createInterface({
            input: fs.createReadStream('test/headers/50From978000DogeMain.txt')
          });
          lineReader.on('line', function (line) {
            //console.log("aa : " + line.split("|")[0]);
            //console.log("bb : " + utils.addSizeToHeader(line.split("|")[0]));            
            //headers += utils.addSizeToHeader(line.split("|")[0]);
            //hashes += line.split("|")[1];
            headers += utils.addSizeToHeader(line);
            hashes += "0000000000000000000000000000000000000000000000000000000000000000";
          });
          lineReader.on('close', function () {
            //console.log("headers : " + headers);
            dr.bulkStoreHeaders(headers, hashes, 50, accounts[2], {from: accounts[0]}).then(resolve);  
          });
        });
      }
    ).then(function(result) {
      console.log(result.receipt.logs);
      return dr.getBestBlockHeight.call();
    }).then(function(result) {
      assert.equal(result.toNumber(), 978050, "blocks not stored as expected");
    });
  });


});
